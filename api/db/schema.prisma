// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

enum Role {
  moderator
  admin
  user
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  slug      String    @unique
  body      String
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String
  message   String
  createdAt DateTime @default(now())
}

model User {
  id                    Int             @id @default(autoincrement())
  name                  String?
  email                 String          @unique
  hashedPassword        String?
  salt                  String?
  resetToken            String?
  resetTokenExpiresAt   DateTime?
  confirmed             Boolean         @default(false)
  confirmToken          String?
  confirmTokenExpiresAt DateTime?
  roles                 Role            @default(user)
  posts                 Post[]
  identities            Identity[]
  streamMessages        StreamMessage[]
  streamer              Streamer?
}

model Comment {
  id        Int      @id @default(autoincrement())
  name      String
  body      String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

enum Provider {
  github
  google
  twitch
}

model Identity {
  id          Int       @id @default(autoincrement())
  provider    Provider
  uid         String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  accessToken String?
  scope       String?
  lastLoginAt DateTime? @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([provider, uid])
  @@index(userId)
}

model Stream {
  id             Int             @id @default(autoincrement())
  connectionId   String          @unique
  streamMessages StreamMessage[]
  streamer       Streamer        @relation(fields: [streamerId], references: [id])
  streamerLive   Streamer?       @relation("LiveStream")
  streamerId     Int
  createdAt      DateTime        @default(now())
  closedAt       DateTime?
}

model StreamMessage {
  id        String   @id @default(cuid())
  stream    Stream   @relation(fields: [streamId], references: [id])
  streamId  Int
  body      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Streamer {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int       @unique
  streams         Stream[]
  banned          Boolean   @default(false)
  timeout         DateTime?
  streamPath      String    @unique
  hashedStreamKey String?
  liveStream      Stream?   @relation("LiveStream", fields: [liveStreamId], references: [id])
  liveStreamId    Int?      @unique

  @@index(userId)
}
